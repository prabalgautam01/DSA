class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int n=heights.size();
        
       
        vector<int> left = nsl(heights, n);
        vector<int> right = nsr(heights, n);
        vector<int> width(n), result(n);
        int ans=0;
        for(int i=0;i<n;i++)
        {
            width[i]=right[i]-left[i]-1;
        }
        for(int i=0;i<n;i++)
        {
            result[i]=heights[i]*width[i];
        }
        for(int i=0;i<n;i++)
        {
            ans=max(ans,result[i]);
        }
        return ans;
    }
     vector<int> nsl(vector<int>& heights,int n)
        {
            vector<int> left;
            stack <pair<int,int>>s;
            int pi=-1;
            for(int i=0;i<n;i++)
            {
                if(s.size()==0)
                {
                    left.push_back(pi);
                }
                else if(s.size()>0 && s.top().first<heights[i])
                {
                    left.push_back(s.top().second);
                }
                else if(s.size()>0 && s.top().first>=heights[i])
                {
                    while(s.size()>0 && s.top().first>=heights[i])
                    {
                        s.pop();
                    }
                    if(s.size()==0)
                    {
                        left.push_back(pi);
                    }
                    else
                    {
                        left.push_back(s.top().second);
                    }
                }
                s.push({heights[i],i});
            }
            return left;
        }
     vector<int> nsr(vector<int>& heights,int n)
        {
            vector<int> right;
            stack <pair<int,int>>s;
            int pi=n;
            for(int i=n-1;i>=0;i--)
            {
                if(s.size()==0)
                {
                    right.push_back(pi);
                }
                else if(s.size()>0 && s.top().first<heights[i])
                {
                    right.push_back(s.top().second);
                }
                else if(s.size()>0 && s.top().first>=heights[i])
                {
                    while(s.size()>0 && s.top().first>=heights[i])
                    {
                        s.pop();
                    }
                    if(s.size()==0)
                    {
                        right.push_back(pi);
                    }
                    else
                    {
                        right.push_back(s.top().second);
                    }
                }
                s.push({heights[i],i});
            }
            reverse(right.begin(),right.end());
            return right;
        }
};
